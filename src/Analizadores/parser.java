package Analizadores;
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java_cup.runtime.*;
import java_cup.runtime.Scanner;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(Scanner s, SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\102\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\003\000\002\004\005\000\002\005\004" +
    "\000\002\005\003\000\002\006\005\000\002\007\007\000" +
    "\002\007\007\000\002\010\003\000\002\010\003\000\002" +
    "\010\003\000\002\011\005\000\002\012\005\000\002\013" +
    "\003\000\002\013\004\000\002\015\003\000\002\015\003" +
    "\000\002\015\003\000\002\015\003\000\002\014\004\000" +
    "\002\014\003\000\002\016\005\000\002\016\005\000\002" +
    "\017\005\000\002\017\003\000\002\022\012\000\002\022" +
    "\011\000\002\025\004\000\002\025\003\000\002\026\004" +
    "\000\002\026\004\000\002\020\011\000\002\021\015\000" +
    "\002\021\011\000\002\027\003\000\002\027\005\000\002" +
    "\027\005\000\002\030\005\000\002\023\003\000\002\023" +
    "\005\000\002\023\005\000\002\024\004\000\002\031\003" +
    "\000\002\031\003\000\002\031\003\000\002\031\003\000" +
    "\002\031\003\000\002\031\003\000\002\032\005\000\002" +
    "\032\005\000\002\032\003\000\002\033\005\000\002\033" +
    "\005\000\002\033\003\000\002\034\005\000\002\034\003" +
    "\000\002\034\003\000\002\034\003\000\002\035\005\000" +
    "\002\035\003\000\002\036\003\000\002\036\003\000\002" +
    "\036\003\000\002\036\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\176\000\006\013\005\015\006\001\002\000\004\002" +
    "\200\001\002\000\004\017\157\001\002\000\004\040\152" +
    "\001\002\000\004\002\ufffe\001\002\000\004\002\000\001" +
    "\002\000\004\015\012\001\002\000\012\004\022\035\021" +
    "\037\024\040\017\001\002\000\004\002\uffff\001\002\000" +
    "\016\004\uffe3\016\uffe3\033\uffe3\035\uffe3\037\uffe3\040\uffe3" +
    "\001\002\000\016\004\uffee\016\uffee\033\uffee\035\uffee\037" +
    "\uffee\040\uffee\001\002\000\016\004\ufff2\016\ufff2\033\ufff2" +
    "\035\ufff2\037\ufff2\040\ufff2\001\002\000\016\004\145\006" +
    "\044\007\146\010\040\011\033\012\032\001\002\000\014" +
    "\004\022\016\144\035\021\037\024\040\017\001\002\000" +
    "\004\030\132\001\002\000\006\004\uffe7\034\uffe7\001\002" +
    "\000\016\004\uffef\016\uffef\033\uffef\035\uffef\037\uffef\040" +
    "\uffef\001\002\000\004\030\113\001\002\000\016\004\ufff0" +
    "\016\ufff0\033\ufff0\035\ufff0\037\ufff0\040\ufff0\001\002\000" +
    "\006\004\030\034\031\001\002\000\016\004\uffed\016\uffed" +
    "\033\uffed\035\uffed\037\uffed\040\uffed\001\002\000\004\034" +
    "\112\001\002\000\022\004\045\006\044\007\036\010\040" +
    "\011\033\012\032\030\034\053\037\001\002\000\056\004" +
    "\uffc0\005\uffc0\016\uffc0\017\uffc0\020\uffc0\025\uffc0\027\uffc0" +
    "\031\uffc0\033\uffc0\035\uffc0\037\uffc0\040\uffc0\041\uffc0\042" +
    "\uffc0\043\uffc0\044\uffc0\045\uffc0\046\uffc0\047\uffc0\050\uffc0" +
    "\051\uffc0\052\uffc0\001\002\000\056\004\uffc1\005\uffc1\016" +
    "\uffc1\017\uffc1\020\uffc1\025\uffc1\027\uffc1\031\uffc1\033\uffc1" +
    "\035\uffc1\037\uffc1\040\uffc1\041\uffc1\042\uffc1\043\uffc1\044" +
    "\uffc1\045\uffc1\046\uffc1\047\uffc1\050\uffc1\051\uffc1\052\uffc1" +
    "\001\002\000\020\004\045\006\044\010\040\011\033\012" +
    "\032\030\034\053\037\001\002\000\056\004\uffcd\005\uffcd" +
    "\016\uffcd\017\uffcd\020\uffcd\025\uffcd\027\uffcd\031\uffcd\033" +
    "\uffcd\035\uffcd\037\uffcd\040\uffcd\041\uffcd\042\uffcd\043\uffcd" +
    "\044\uffcd\045\uffcd\046\uffcd\047\052\050\053\051\uffcd\052" +
    "\uffcd\001\002\000\016\004\uffe9\016\uffe9\033\uffe9\035\uffe9" +
    "\037\uffe9\040\uffe9\001\002\000\004\030\057\001\002\000" +
    "\056\004\uffc2\005\uffc2\016\uffc2\017\uffc2\020\uffc2\025\uffc2" +
    "\027\uffc2\031\uffc2\033\uffc2\035\uffc2\037\uffc2\040\uffc2\041" +
    "\uffc2\042\uffc2\043\uffc2\044\uffc2\045\uffc2\046\uffc2\047\uffc2" +
    "\050\uffc2\051\uffc2\052\uffc2\001\002\000\056\004\uffc6\005" +
    "\uffc6\016\uffc6\017\uffc6\020\uffc6\025\uffc6\027\uffc6\031\uffc6" +
    "\033\uffc6\035\uffc6\037\uffc6\040\uffc6\041\uffc6\042\uffc6\043" +
    "\uffc6\044\uffc6\045\uffc6\046\uffc6\047\uffc6\050\uffc6\051\uffc6" +
    "\052\uffc6\001\002\000\056\004\uffc7\005\uffc7\016\uffc7\017" +
    "\uffc7\020\uffc7\025\uffc7\027\uffc7\031\uffc7\033\uffc7\035\uffc7" +
    "\037\uffc7\040\uffc7\041\uffc7\042\uffc7\043\uffc7\044\uffc7\045" +
    "\uffc7\046\uffc7\047\uffc7\050\uffc7\051\uffc7\052\uffc7\001\002" +
    "\000\022\004\uffea\016\uffea\033\uffea\035\uffea\037\uffea\040" +
    "\uffea\045\050\046\047\001\002\000\056\004\uffc3\005\uffc3" +
    "\016\uffc3\017\uffc3\020\uffc3\025\uffc3\027\uffc3\031\uffc3\033" +
    "\uffc3\035\uffc3\037\uffc3\040\uffc3\041\uffc3\042\uffc3\043\uffc3" +
    "\044\uffc3\045\uffc3\046\uffc3\047\uffc3\050\uffc3\051\uffc3\052" +
    "\uffc3\001\002\000\056\004\uffc8\005\uffc8\016\uffc8\017\uffc8" +
    "\020\uffc8\025\uffc8\027\uffc8\031\uffc8\033\uffc8\035\uffc8\037" +
    "\uffc8\040\uffc8\041\uffc8\042\uffc8\043\uffc8\044\uffc8\045\uffc8" +
    "\046\uffc8\047\uffc8\050\uffc8\051\uffc8\052\uffc8\001\002\000" +
    "\056\004\uffca\005\uffca\016\uffca\017\uffca\020\uffca\025\uffca" +
    "\027\uffca\031\uffca\033\uffca\035\uffca\037\uffca\040\uffca\041" +
    "\uffca\042\uffca\043\uffca\044\uffca\045\uffca\046\uffca\047\uffca" +
    "\050\uffca\051\uffca\052\uffca\001\002\000\020\004\045\006" +
    "\044\010\040\011\033\012\032\030\034\053\037\001\002" +
    "\000\020\004\045\006\044\010\040\011\033\012\032\030" +
    "\034\053\037\001\002\000\056\004\uffcf\005\uffcf\016\uffcf" +
    "\017\uffcf\020\uffcf\025\uffcf\027\uffcf\031\uffcf\033\uffcf\035" +
    "\uffcf\037\uffcf\040\uffcf\041\uffcf\042\uffcf\043\uffcf\044\uffcf" +
    "\045\uffcf\046\uffcf\047\052\050\053\051\uffcf\052\uffcf\001" +
    "\002\000\020\004\045\006\044\010\040\011\033\012\032" +
    "\030\034\053\037\001\002\000\020\004\045\006\044\010" +
    "\040\011\033\012\032\030\034\053\037\001\002\000\056" +
    "\004\uffcb\005\uffcb\016\uffcb\017\uffcb\020\uffcb\025\uffcb\027" +
    "\uffcb\031\uffcb\033\uffcb\035\uffcb\037\uffcb\040\uffcb\041\uffcb" +
    "\042\uffcb\043\uffcb\044\uffcb\045\uffcb\046\uffcb\047\uffcb\050" +
    "\uffcb\051\uffcb\052\uffcb\001\002\000\056\004\uffcc\005\uffcc" +
    "\016\uffcc\017\uffcc\020\uffcc\025\uffcc\027\uffcc\031\uffcc\033" +
    "\uffcc\035\uffcc\037\uffcc\040\uffcc\041\uffcc\042\uffcc\043\uffcc" +
    "\044\uffcc\045\uffcc\046\uffcc\047\uffcc\050\uffcc\051\uffcc\052" +
    "\uffcc\001\002\000\056\004\uffce\005\uffce\016\uffce\017\uffce" +
    "\020\uffce\025\uffce\027\uffce\031\uffce\033\uffce\035\uffce\037" +
    "\uffce\040\uffce\041\uffce\042\uffce\043\uffce\044\uffce\045\uffce" +
    "\046\uffce\047\052\050\053\051\uffce\052\uffce\001\002\000" +
    "\016\017\060\020\066\041\063\042\062\043\064\044\070" +
    "\001\002\000\020\004\uffd3\006\uffd3\010\uffd3\011\uffd3\012" +
    "\uffd3\030\uffd3\053\uffd3\001\002\000\010\025\uffd9\051\105" +
    "\052\104\001\002\000\020\004\uffd4\006\uffd4\010\uffd4\011" +
    "\uffd4\012\uffd4\030\uffd4\053\uffd4\001\002\000\020\004\uffd5" +
    "\006\uffd5\010\uffd5\011\uffd5\012\uffd5\030\uffd5\053\uffd5\001" +
    "\002\000\020\004\uffd1\006\uffd1\010\uffd1\011\uffd1\012\uffd1" +
    "\030\uffd1\053\uffd1\001\002\000\020\004\045\006\044\010" +
    "\040\011\033\012\032\030\034\053\037\001\002\000\020" +
    "\004\uffd2\006\uffd2\010\uffd2\011\uffd2\012\uffd2\030\uffd2\053" +
    "\uffd2\001\002\000\004\025\071\001\002\000\020\004\uffd0" +
    "\006\uffd0\010\uffd0\011\uffd0\012\uffd0\030\uffd0\053\uffd0\001" +
    "\002\000\004\026\072\001\002\000\022\004\045\006\044" +
    "\010\040\011\033\012\032\027\075\030\034\053\037\001" +
    "\002\000\012\005\uffc4\027\uffc4\045\050\046\047\001\002" +
    "\000\006\005\100\027\077\001\002\000\004\031\076\001" +
    "\002\000\056\004\uffe5\005\uffe5\016\uffe5\017\uffe5\020\uffe5" +
    "\025\uffe5\027\uffe5\031\uffe5\033\uffe5\035\uffe5\037\uffe5\040" +
    "\uffe5\041\uffe5\042\uffe5\043\uffe5\044\uffe5\045\uffe5\046\uffe5" +
    "\047\uffe5\050\uffe5\051\uffe5\052\uffe5\001\002\000\004\031" +
    "\102\001\002\000\020\004\045\006\044\010\040\011\033" +
    "\012\032\030\034\053\037\001\002\000\012\005\uffc5\027" +
    "\uffc5\045\050\046\047\001\002\000\056\004\uffe6\005\uffe6" +
    "\016\uffe6\017\uffe6\020\uffe6\025\uffe6\027\uffe6\031\uffe6\033" +
    "\uffe6\035\uffe6\037\uffe6\040\uffe6\041\uffe6\042\uffe6\043\uffe6" +
    "\044\uffe6\045\uffe6\046\uffe6\047\uffe6\050\uffe6\051\uffe6\052" +
    "\uffe6\001\002\000\014\025\uffd6\045\050\046\047\051\uffd6" +
    "\052\uffd6\001\002\000\016\017\060\020\066\041\063\042" +
    "\062\043\064\044\070\001\002\000\016\017\060\020\066" +
    "\041\063\042\062\043\064\044\070\001\002\000\004\025" +
    "\uffd8\001\002\000\004\025\uffd7\001\002\000\010\031\111" +
    "\045\050\046\047\001\002\000\056\004\uffc9\005\uffc9\016" +
    "\uffc9\017\uffc9\020\uffc9\025\uffc9\027\uffc9\031\uffc9\033\uffc9" +
    "\035\uffc9\037\uffc9\040\uffc9\041\uffc9\042\uffc9\043\uffc9\044" +
    "\uffc9\045\uffc9\046\uffc9\047\uffc9\050\uffc9\051\uffc9\052\uffc9" +
    "\001\002\000\006\004\uffe8\034\uffe8\001\002\000\020\004" +
    "\045\006\044\010\040\011\033\012\032\030\034\053\037" +
    "\001\002\000\010\031\uffdd\051\127\052\126\001\002\000" +
    "\022\017\060\020\066\041\063\042\062\043\064\044\070" +
    "\045\050\046\047\001\002\000\004\031\117\001\002\000" +
    "\004\032\120\001\002\000\012\004\022\035\021\037\024" +
    "\040\017\001\002\000\014\004\022\033\123\035\021\037" +
    "\024\040\017\001\002\000\016\004\ufff1\016\ufff1\033\ufff1" +
    "\035\ufff1\037\ufff1\040\ufff1\001\002\000\016\004\uffe0\016" +
    "\uffe0\033\uffe0\035\uffe0\037\uffe0\040\uffe0\001\002\000\020" +
    "\004\045\006\044\010\040\011\033\012\032\030\034\053" +
    "\037\001\002\000\014\031\uffda\045\050\046\047\051\uffda" +
    "\052\uffda\001\002\000\020\004\045\006\044\010\040\011" +
    "\033\012\032\030\034\053\037\001\002\000\020\004\045" +
    "\006\044\010\040\011\033\012\032\030\034\053\037\001" +
    "\002\000\004\031\uffdc\001\002\000\004\031\uffdb\001\002" +
    "\000\020\004\045\006\044\010\040\011\033\012\032\030" +
    "\034\053\037\001\002\000\004\031\134\001\002\000\004" +
    "\032\135\001\002\000\012\004\022\035\021\037\024\040" +
    "\017\001\002\000\014\004\022\033\137\035\021\037\024" +
    "\040\017\001\002\000\020\004\uffde\016\uffde\033\uffde\035" +
    "\uffde\036\140\037\uffde\040\uffde\001\002\000\004\032\141" +
    "\001\002\000\012\004\022\035\021\037\024\040\017\001" +
    "\002\000\014\004\022\033\143\035\021\037\024\040\017" +
    "\001\002\000\016\004\uffdf\016\uffdf\033\uffdf\035\uffdf\037" +
    "\uffdf\040\uffdf\001\002\000\004\002\ufff4\001\002\000\016" +
    "\004\uffe4\016\uffe4\033\uffe4\035\uffe4\037\uffe4\040\uffe4\001" +
    "\002\000\016\004\uffe1\016\uffe1\033\uffe1\035\uffe1\037\uffe1" +
    "\040\uffe1\001\002\000\016\004\uffe2\016\uffe2\033\uffe2\035" +
    "\uffe2\037\uffe2\040\uffe2\001\002\000\006\016\uffeb\040\uffeb" +
    "\001\002\000\006\016\153\040\152\001\002\000\014\006" +
    "\044\007\146\010\040\011\033\012\032\001\002\000\004" +
    "\002\ufff3\001\002\000\006\016\uffec\040\uffec\001\002\000" +
    "\006\014\177\017\157\001\002\000\006\014\ufffb\017\ufffb" +
    "\001\002\000\010\021\161\022\160\023\162\001\002\000" +
    "\006\005\ufff6\020\ufff6\001\002\000\006\005\ufff7\020\ufff7" +
    "\001\002\000\006\005\ufff5\020\ufff5\001\002\000\004\020" +
    "\175\001\002\000\006\005\165\020\166\001\002\000\010" +
    "\021\161\022\160\023\162\001\002\000\004\024\167\001" +
    "\002\000\004\017\170\001\002\000\004\004\171\001\002" +
    "\000\006\005\ufff8\020\ufff8\001\002\000\004\005\173\001" +
    "\002\000\004\004\174\001\002\000\006\005\ufff9\020\ufff9" +
    "\001\002\000\006\014\ufffa\017\ufffa\001\002\000\006\014" +
    "\ufffc\017\ufffc\001\002\000\004\015\ufffd\001\002\000\004" +
    "\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\176\000\012\002\003\003\007\004\010\012\006\001" +
    "\001\000\002\001\001\000\006\005\154\006\155\001\001" +
    "\000\006\014\150\026\147\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\011\012\001\001\000\022\013\017" +
    "\015\015\016\024\017\025\020\022\021\014\025\026\026" +
    "\013\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\036\146\001\001\000" +
    "\020\015\121\016\024\017\025\020\022\021\014\025\026" +
    "\026\013\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\022" +
    "\040\032\042\033\034\034\045\036\041\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\022\040\032\107\033" +
    "\034\034\045\036\041\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\022\040\033" +
    "\055\034\045\036\041\001\001\000\012\022\040\033\050" +
    "\034\045\036\041\001\001\000\002\001\001\000\010\022" +
    "\040\034\054\036\041\001\001\000\010\022\040\034\053" +
    "\036\041\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\023\066\024\060\031\064\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\022\040\032\102" +
    "\033\034\034\045\036\041\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\022\040\032\072\033\034\034\045\035\073\036\041\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\022\040\032" +
    "\100\033\034\034\045\036\041\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\024\106\031" +
    "\064\001\001\000\006\024\105\031\064\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\022\040\027\115\030\113" +
    "\032\114\033\034\034\045\036\041\001\001\000\002\001" +
    "\001\000\004\031\123\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\013\120\015\015\016\024\017\025\020" +
    "\022\021\014\025\026\026\013\001\001\000\020\015\121" +
    "\016\024\017\025\020\022\021\014\025\026\026\013\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\022\040" +
    "\032\124\033\034\034\045\036\041\001\001\000\002\001" +
    "\001\000\016\022\040\030\130\032\114\033\034\034\045" +
    "\036\041\001\001\000\016\022\040\030\127\032\114\033" +
    "\034\034\045\036\041\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\022\040\027\132\030\113\032\114\033" +
    "\034\034\045\036\041\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\013\135\015\015\016\024\017\025\020" +
    "\022\021\014\025\026\026\013\001\001\000\020\015\121" +
    "\016\024\017\025\020\022\021\014\025\026\026\013\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\013\141" +
    "\015\015\016\024\017\025\020\022\021\014\025\026\026" +
    "\013\001\001\000\020\015\121\016\024\017\025\020\022" +
    "\021\014\025\026\026\013\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\026\153\001\001\000" +
    "\004\036\146\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\006\175\001\001\000\002\001\001\000\006\007" +
    "\162\010\163\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\007\171\010\163\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public Symbol do_action(
    int                        act_num,
    lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public String res = "";
    /**MEetodo que se llama auntomaticamente ante algun error sintactico*/
    public void syntax_error(Symbol s){
        System.out.println("Error en la linea " + (s.right+1) + " columna " + s.left + ". "
            + s + " no reconocido. Valor " + s.value );
            res = res + "Error en la linea " + (s.right+1) + " columna " + s.left + ". " + s + " no reconocido. Valor " + s.value;
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {



  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws Exception
    {
      /* Symbol object for return from actions */
      Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= pgm EOF 
            {
              Object RESULT =null;
		int start_valleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // pgm ::= program 
            {
              Object RESULT =null;
		 System.out.println("pgm Regla 0. Compila correctamente llegando al simbolo start");
                    res = res + "pgm Regla 0. Compila correctamente llegando al simbolo start \n"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("pgm",0, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program ::= bloqueDeclaraciones pgm1 
            {
              Object RESULT =null;
		 System.out.println("[Regla 1] Programa con declaraciones");
                                        res = res + "[Regla 1] Programa con declaraciones \n"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",1, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // program ::= pgm2 
            {
              Object RESULT =null;
		 System.out.println("[Regla 2] Programa sin declaraciones");
                      res = res + "[Regla 2] Programa sin declaraciones \n"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",1, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // bloqueDeclaraciones ::= PRDEFINE declaraciones PRENDDEFINE 
            {
              Object RESULT =null;
		 System.out.println("[Regla 3] BloqueDeclaraciones");
                        res = res + "[Regla 3] BloqueDeclaraciones \n"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloqueDeclaraciones",2, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // declaraciones ::= declaraciones listaDeclaracion 
            {
              Object RESULT =null;
		 System.out.println("[Regla 4] Lista de Declaraciones de varios elementos");
                                                    res = res + "[Regla 4] Lista de Declaraciones de varios elementos \n"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaraciones",3, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // declaraciones ::= listaDeclaracion 
            {
              Object RESULT =null;
		 System.out.println("[Regla 5] Lista de Declaraciones un elemento" );
                                        res = res + "[Regla 5] Lista de Declaraciones un elemento \n"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaraciones",3, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // listaDeclaracion ::= MENOR declaracion MAYOR 
            {
              Object RESULT =null;
		 System.out.println("[Regla 6] < Declaracion >");
                                                res = res + "[Regla 6] < Declaracion > \n"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaDeclaracion",4, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // declaracion ::= tipoDato COMA declaracion COMA ID 
            {
              Object RESULT =null;
		 System.out.println("[Regla 7] Declaracion de mas de una variable");
                                                      res = res + "[Regla 7] Declaracion de mas de una variable \n"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",5, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // declaracion ::= tipoDato MAYOR DP MENOR ID 
            {
              Object RESULT =null;
		 System.out.println("[Regla 8] Declaracion de una variable");
                                                 res = res + "[Regla 8] Declaracion de una variable \n"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",5, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // tipoDato ::= PRINT 
            {
              Object RESULT =null;
		int valleft = ((Symbol)CUP$parser$stack.peek()).left;
		int valright = ((Symbol)CUP$parser$stack.peek()).right;
		Object val = (Object)((Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("[Regla 9] Tipo de dato entero  = " + val);
                           res = res + "[Regla 9] Tipo de dato entero  = " + val + "\n";
                           RESULT = val; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoDato",6, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // tipoDato ::= PRFLOAT 
            {
              Object RESULT =null;
		int valleft = ((Symbol)CUP$parser$stack.peek()).left;
		int valright = ((Symbol)CUP$parser$stack.peek()).right;
		Object val = (Object)((Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("[Regla 10] Tipo de dato flotante  = " + val);
                             res = res + "[Regla 10] Tipo de dato flotante  = " + val + "\n";
                             RESULT = val; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoDato",6, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // tipoDato ::= PRSTRING 
            {
              Object RESULT =null;
		int valleft = ((Symbol)CUP$parser$stack.peek()).left;
		int valright = ((Symbol)CUP$parser$stack.peek()).right;
		Object val = (Object)((Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("[Regla 11] Tipo de dato string  = " + val);
                              res = res + "[Regla 11] Tipo de dato string  = " + val + "\n";
                              RESULT = val; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoDato",6, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // pgm1 ::= PRPROGRAM programa1 PREND 
            {
              Object RESULT =null;
		 System.out.println("[Regla 12] Programa con variables");
                                       res = res + "[Regla 12] Programa con variables \n"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("pgm1",7, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // pgm2 ::= PRPROGRAM programa2 PREND 
            {
              Object RESULT =null;
		 System.out.println("[Regla 13] Programa solo de write");
                                        res = res + "[Regla 13] Programa solo de write \n"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("pgm2",8, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // programa1 ::= sentencia 
            {
              Object RESULT =null;
		 System.out.println("[Regla 14] Sentencia");
                            res = res + "[Regla 14] Sentencia \n"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("programa1",9, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // programa1 ::= programa1 sentencia 
            {
              Object RESULT =null;
		 System.out.println("[Regla 15] Sentencias");
                                         res = res + "[Regla 15] Sentencias \n"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("programa1",9, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // sentencia ::= asignacionMultiple 
            {
              Object RESULT =null;
		 System.out.println("[Regla 16] AsignacionMultiple");
                                       res = res + "[Regla 16] AsignacionMultiple \n"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",11, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // sentencia ::= iteracion 
            {
              Object RESULT =null;
		 System.out.println("[Regla 17] Iteracion");
                            res = res + "[Regla 17] Iteracion \n"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",11, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // sentencia ::= seleccion 
            {
              Object RESULT =null;
		 System.out.println("[Regla 18] Seleccion");
                            res = res + "[Regla 18] Seleccion \n"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",11, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // sentencia ::= write 
            {
              Object RESULT =null;
		 System.out.println("[Regla 19] Write");
                        res = res + "[Regla 19] Write \n"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",11, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // programa2 ::= programa2 writeCte 
            {
              Object RESULT =null;
		 System.out.println("[Regla 20] Write de constantes");
                                    res = res + "[Regla 20] Write de constantes \n"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("programa2",10, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // programa2 ::= writeCte 
            {
              Object RESULT =null;
		 System.out.println("[Regla 21] WriteCte ");
                                    res = res + "[Regla 21] WriteCte \n"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("programa2",10, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // asignacionMultiple ::= listaAsignacion ASIGN expresion 
            {
              Object RESULT =null;
		 System.out.println("[Regla 22] ListaAsignacion ASIGN Expresion");
                                                            res = res + "[Regla 22] ListaAsignacion ASIGN Expresion \n"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacionMultiple",12, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // asignacionMultiple ::= listaAsignacion ASIGN CONST_STRING 
            {
              Object RESULT =null;
		 System.out.println("[Regla 23] ListaAsignacion ASIGN CONST_STRING");
                                                            res = res + "[Regla 23] ListaAsignacion ASIGN CONST_STRING \n"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacionMultiple",12, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // listaAsignacion ::= listaAsignacion ID ASIGN 
            {
              Object RESULT =null;
		 System.out.println("[Regla 24] ListaAsignacion ID ASIGN");
                                                res = res + "[Regla 24] ListaAsignacion ID ASIGN \n"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaAsignacion",13, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // listaAsignacion ::= ID 
            {
              Object RESULT =null;
		int idleft = ((Symbol)CUP$parser$stack.peek()).left;
		int idright = ((Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("[Regla 25] Variable ID Valor = " + id);
                            res = res + "[Regla 25] Variable ID Valor = " + id + "\n";
                             RESULT = id; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaAsignacion",13, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // contar ::= PRCONTAR PA condicionContar PYC CA lista CC PC 
            {
              Object RESULT =null;
		 System.out.println("[Regla 26] Contar");
                                                              res = res + "[Regla 26] Contar \n"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("contar",16, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // contar ::= PRCONTAR PA condicionContar PYC CA CC PC 
            {
              Object RESULT =null;
		 System.out.println("[Regla 27] Contar Vacio");
                                                        res = res + "[Regla 27] Contar Vacio \n"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("contar",16, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // write ::= PRWRITE ID 
            {
              Object RESULT =null;
		 System.out.println("[Regla 28] WRITE ID");
                        res = res + "[Regla 28] WRITE ID \n"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("write",19, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // write ::= writeCte 
            {
              Object RESULT =null;
		 System.out.println("[Regla 29] WriteCte");
                      res = res + "[Regla 29] WriteCte \n"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("write",19, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // writeCte ::= PRWRITE constante 
            {
              Object RESULT =null;
		 System.out.println("[Regla 30] WRITE Constante");
                                  res = res + "[Regla 30] WRITE Constante \n"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("writeCte",20, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // writeCte ::= PRWRITE CONST_STRING 
            {
              Object RESULT =null;
		 System.out.println("[Regla 31] WRITE CONST_STRING");
                                  res = res + "[Regla 31] WRITE Constante String \n"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("writeCte",20, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // iteracion ::= PRWHILE PA condicion PC LLAVEA programa1 LLAVEC 
            {
              Object RESULT =null;
		 System.out.println("[Regla 32] Iteracion While");
                                                                  res = res + "[Regla 32] Iteracion While \n"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("iteracion",14, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // seleccion ::= PRIF PA condicion PC LLAVEA programa1 LLAVEC PRELSE LLAVEA programa1 LLAVEC 
            {
              Object RESULT =null;
		 System.out.println("[Regla 33] Seleccion If/Else");
                                                                                              res = res + "[Regla 33] Seleccion If/Else \n"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("seleccion",15, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // seleccion ::= PRIF PA condicion PC LLAVEA programa1 LLAVEC 
            {
              Object RESULT =null;
		 System.out.println("[Regla 34] Seleccion If");
                                                                res = res + "[Regla 34] Seleccion If \n"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("seleccion",15, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // condicion ::= comparacion 
            {
              Object RESULT =null;
		 System.out.println("[Regla 35] Comparacion");
                              res = res + "[Regla 35] Comparacion \n"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",21, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // condicion ::= comparacion PRAND comparacion 
            {
              Object RESULT =null;
		 System.out.println("[Regla 36] Comparacion PRAND Comparacion");
                                                res = res + "[Regla 36] Comparacion PRAND Comparacion \n"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",21, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // condicion ::= comparacion PROR comparacion 
            {
              Object RESULT =null;
		 System.out.println("[Regla 37] Comparacion OR Comparacion");
                                                res = res + "[Regla 37] Comparacion OR Comparacion \n"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",21, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // comparacion ::= expresion comparador expresion 
            {
              Object RESULT =null;
		 System.out.println("[Regla 38] Expresion Comparador Expresion");
                                                    res = res + "[Regla 38] Expresion Comparador Expresion \n"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparacion",22, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // condicionContar ::= comparacionContar 
            {
              Object RESULT =null;
		 System.out.println("[Regla 39] Comparacion_Contar");
                                         res = res + "[Regla 39] Comparacion_Contar \n"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicionContar",17, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // condicionContar ::= comparacionContar PRAND comparacionContar 
            {
              Object RESULT =null;
		 System.out.println("[Regla 40] Comparacion_Contar PRAND Comparacion_Contar");
                                                                  res = res + "[Regla 40] Comparacion_Contar PRAND Comparacion_Contar \n"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicionContar",17, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // condicionContar ::= comparacionContar PROR comparacionContar 
            {
              Object RESULT =null;
		 System.out.println("[Regla 41] Comparacion_Contar PROR Comparacion_Contar");
                                                                res = res + "[Regla 41] Comparacion_Contar PROR Comparacion_Contar \n"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicionContar",17, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // comparacionContar ::= comparador expresion 
            {
              Object RESULT =null;
		 System.out.println("[Regla 42] Comparador Expresion");
                                              res = res + "[Regla 42] Comparador Expresion \n"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparacionContar",18, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // comparador ::= MAYIGUAL 
            {
              Object RESULT =null;
		 System.out.println("[Regla 43] Simbolo >= ");
                           res = res + "[Regla 43] Simbolo >=  \n"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparador",23, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // comparador ::= MENIGUAL 
            {
              Object RESULT =null;
		 System.out.println("[Regla 44] Simbolo <= ");
                       res = res + "[Regla 44] Simbolo <=  \n"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparador",23, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // comparador ::= MENOR 
            {
              Object RESULT =null;
		 System.out.println("[Regla 45] Simbolo < ");
                   res = res + "[Regla 45] Simbolo <  \n"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparador",23, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // comparador ::= MAYOR 
            {
              Object RESULT =null;
		 System.out.println("[Regla 46] Simbolo > ");
                    res = res + "[Regla 46] Simbolo >  \n"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparador",23, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // comparador ::= EQUIVALENTE 
            {
              Object RESULT =null;
		 System.out.println("[Regla 47] Simbolo == ");
                         res = res + "[Regla 47] Simbolo ==  \n"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparador",23, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // comparador ::= DISTINTO 
            {
              Object RESULT =null;
		 System.out.println("[Regla 48] Simbolo <> ");
                      res = res + "[Regla 48] Simbolo <>  \n"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparador",23, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // expresion ::= expresion SUMA termino 
            {
              Object RESULT =null;
		 System.out.println("[Regla 49] Expresion + Termino");
                                        res = res + "[Regla 49] Expresion + Termino \n"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",24, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // expresion ::= expresion RESTA termino 
            {
              Object RESULT =null;
		 System.out.println("[Regla 50] Expresion - Termino");
                                      res = res + "[Regla 50] Expresion - Termino \n"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",24, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // expresion ::= termino 
            {
              Object RESULT =null;
		 System.out.println("[Regla 51] Termino ");
                       res = res + "[Regla 51] Termino \n"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",24, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // termino ::= termino MULTIPLICACION factor 
            {
              Object RESULT =null;
		 System.out.println("[Regla 52] Termino * Factor");
                                              res = res + "[Regla 52] Termino * Factor \n";
                                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("termino",25, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // termino ::= termino DIVISION factor 
            {
              Object RESULT =null;
		 System.out.println("[Regla 53] Termino / Factor ");
                                        res = res + "[Regla 53] Termino / Factor \n";
                                         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("termino",25, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // termino ::= factor 
            {
              Object RESULT =null;
		int fleft = ((Symbol)CUP$parser$stack.peek()).left;
		int fright = ((Symbol)CUP$parser$stack.peek()).right;
		Object f = (Object)((Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("[Regla 54] Factor" + f);
                      res = res + "[Regla 54] Factor" + f + "\n";
                      RESULT = f;
                   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("termino",25, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // factor ::= PA expresion PC 
            {
              Object RESULT =null;
		 System.out.println("[Regla 55] Parentesis_Abierto Expresion Parentesis_Cerrado");
                              res = res + "[Regla 55] Parentesis_Abierto Expresion Parentesis_Cerrado \n"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",26, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // factor ::= ID 
            {
              Object RESULT =null;
		int idleft = ((Symbol)CUP$parser$stack.peek()).left;
		int idright = ((Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("[Regla 56] Factor ID = " + id);
                    res = res + "[Regla 56] Factor ID = " + id + "\n";
                    RESULT = id; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",26, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // factor ::= constante 
            {
              Object RESULT =null;
		int cteleft = ((Symbol)CUP$parser$stack.peek()).left;
		int cteright = ((Symbol)CUP$parser$stack.peek()).right;
		Object cte = (Object)((Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("[Regla 57] constante" + cte);
                        res = res + "[Regla 57] constante" + cte + "\n";
                        RESULT = cte;
                         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",26, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // factor ::= contar 
            {
              Object RESULT =null;
		 System.out.println("[Regla 58] Funcion Contar");
                    res = res + "[Regla 58] Funcion Contar \n"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",26, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // lista ::= lista COMA expresion 
            {
              Object RESULT =null;
		 System.out.println("[Regla 59] Lista");
                                   res = res + "[Regla 59] Lista \n"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista",27, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // lista ::= expresion 
            {
              Object RESULT =null;
		 System.out.println("[Regla 60] Expresion ");
                       res = res + "[Regla 60] Expresion \n"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista",27, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // constante ::= CONST_INT 
            {
              Object RESULT =null;
		int valleft = ((Symbol)CUP$parser$stack.peek()).left;
		int valright = ((Symbol)CUP$parser$stack.peek()).right;
		Object val = (Object)((Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("[Regla 61] Constante = " + val);
                               res = res + "[Regla 61] Constante = " + val + "\n";
                               RESULT = val; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constante",28, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // constante ::= CONST_FLOAT 
            {
              Object RESULT =null;
		int valleft = ((Symbol)CUP$parser$stack.peek()).left;
		int valright = ((Symbol)CUP$parser$stack.peek()).right;
		Object val = (Object)((Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("[Regla 62] Constante = " + val);
                             res = res + "[Regla 62] Constante = " + val + "\n";
                             RESULT = val; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constante",28, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // constante ::= CONST_BIN 
            {
              Object RESULT =null;
		int valleft = ((Symbol)CUP$parser$stack.peek()).left;
		int valright = ((Symbol)CUP$parser$stack.peek()).right;
		Object val = (Object)((Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("[Regla 63] Constante = " + val);
                            res = res + "[Regla 63] Constante = " + val  + "\n";
                            RESULT = val; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constante",28, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // constante ::= CONST_HEXA 
            {
              Object RESULT =null;
		int valleft = ((Symbol)CUP$parser$stack.peek()).left;
		int valright = ((Symbol)CUP$parser$stack.peek()).right;
		Object val = (Object)((Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("[Regla 64] Constante = " + val);
                            res = res + "[Regla 64] Constante = " + val  + "\n";
                            RESULT = val; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constante",28, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
